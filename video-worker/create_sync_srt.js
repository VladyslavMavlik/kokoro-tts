#!/usr/bin/env node
// create_sync_srt.js
// –ü—Ä–æ—Å—Ç–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏—Ö —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ –∑ Whisper JSON
// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node create_sync_srt.js input.json output.srt [words_per_chunk]

import fs from "node:fs/promises";
import path from "node:path";

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–∫–æ–¥—É –¥–ª—è SRT
function formatTimecode(seconds) {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = Math.floor(seconds % 60);
  const millis = Math.floor((seconds % 1) * 1000);

  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')},${millis.toString().padStart(3, '0')}`;
}

// –†–æ–∑—É–º–Ω–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä—ñ–≤
function smartLineWrap(words, maxCharsPerLine = 35) {
  const text = words.join(' ');

  // –Ø–∫—â–æ –∫–æ—Ä–æ—Ç–∫–æ - –∑–∞–ª–∏—à–∞—î–º–æ –æ–¥–Ω–∏–º —Ä—è–¥–∫–æ–º
  if (text.length <= maxCharsPerLine) {
    return text;
  }

  // –®—É–∫–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–µ –º—ñ—Å—Ü–µ –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è
  const halfLength = Math.floor(words.length / 2);

  // –ü—Ä–æ–±—É—î–º–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω—ñ, –∞–ª–µ –Ω–∞ –º–µ–∂—ñ —Å–ª—ñ–≤
  for (let i = 0; i <= 2; i++) {
    const splitIndex = halfLength - i;
    if (splitIndex > 0 && splitIndex < words.length - 1) {
      const firstLine = words.slice(0, splitIndex).join(' ');
      const secondLine = words.slice(splitIndex).join(' ');

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –æ–±–∏–¥–≤–∞ —Ä—è–¥–∫–∏ –Ω–µ –Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ
      if (firstLine.length <= maxCharsPerLine && secondLine.length <= maxCharsPerLine) {
        return `${firstLine}\n${secondLine}`;
      }
    }

    // –ü—Ä–æ–±—É—î–º–æ –∑ —ñ–Ω—à–æ–≥–æ –±–æ–∫—É
    const splitIndexRight = halfLength + i;
    if (splitIndexRight > 0 && splitIndexRight < words.length - 1) {
      const firstLine = words.slice(0, splitIndexRight).join(' ');
      const secondLine = words.slice(splitIndexRight).join(' ');

      if (firstLine.length <= maxCharsPerLine && secondLine.length <= maxCharsPerLine) {
        return `${firstLine}\n${secondLine}`;
      }
    }
  }

  // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Ö–æ—Ä–æ—à–µ –º—ñ—Å—Ü–µ - –ø—Ä–æ—Å—Ç–æ –¥—ñ–ª–∏–º–æ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω—ñ
  const firstLine = words.slice(0, halfLength).join(' ');
  const secondLine = words.slice(halfLength).join(' ');
  return `${firstLine}\n${secondLine}`;
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è SRT
async function createSyncSrt(jsonPath, srtPath, wordsPerChunk = 5) {
  try {
    console.log(`üìã Reading Whisper JSON: ${jsonPath}`);

    // –ß–∏—Ç–∞—î–º–æ JSON —Ñ–∞–π–ª
    const jsonContent = await fs.readFile(jsonPath, 'utf8');
    const whisperData = JSON.parse(jsonContent);

    if (!whisperData.segments || whisperData.segments.length === 0) {
      throw new Error("No segments found in Whisper JSON");
    }

    // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Å–ª–æ–≤–∞ –∑ —É—Å—ñ—Ö —Å–µ–≥–º–µ–Ω—Ç—ñ–≤
    const allWords = [];
    for (const segment of whisperData.segments) {
      if (segment.words && Array.isArray(segment.words)) {
        for (const word of segment.words) {
          // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å–ª–æ–≤–∞ –∑ –≤–∞–ª—ñ–¥–Ω–∏–º–∏ timestamps
          if (word.start !== undefined && word.end !== undefined && word.word) {
            allWords.push({
              word: word.word.trim(),
              start: word.start,
              end: word.end
            });
          }
        }
      }
    }

    if (allWords.length === 0) {
      throw new Error("No words with valid timestamps found");
    }

    console.log(`üìä Found ${allWords.length} words with timestamps`);
    console.log(`üî¢ Grouping by ${wordsPerChunk} words per subtitle`);

    // –ì—Ä—É–ø—É—î–º–æ —Å–ª–æ–≤–∞ –ø–æ wordsPerChunk
    const chunks = [];
    for (let i = 0; i < allWords.length; i += wordsPerChunk) {
      const chunk = allWords.slice(i, i + wordsPerChunk);
      chunks.push(chunk);
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ SRT –∑–∞–ø–∏—Å–∏ –∑ —Ç–æ—á–Ω–æ—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é
    const srtEntries = [];
    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i];
      const startTime = chunk[0].start;

      // –ö—ñ–Ω—Ü–µ–≤–∏–π —á–∞—Å - –æ—Å—Ç–∞–Ω–Ω—î —Å–ª–æ–≤–æ + –Ω–µ–≤–µ–ª–∏–∫–∏–π –±—É—Ñ–µ—Ä
      let endTime = chunk[chunk.length - 1].end;

      // –î–æ–¥–∞—î–º–æ –±—É—Ñ–µ—Ä –º—ñ–∂ –≥—Ä—É–ø–∞–º–∏ (100ms), –∞–ª–µ –Ω–µ –±—ñ–ª—å—à–µ –ø–æ—á–∞—Ç–∫—É –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≥—Ä—É–ø–∏
      if (i < chunks.length - 1) {
        const nextStartTime = chunks[i + 1][0].start;
        endTime = Math.min(endTime + 0.1, nextStartTime - 0.05);
      } else {
        endTime += 0.1; // –û—Å—Ç–∞–Ω–Ω—ñ–π —Å—É–±—Ç–∏—Ç—Ä - –ø—Ä–æ—Å—Ç–æ +100ms
      }

      // –†–æ–∑—É–º–Ω–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è: —Ä–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ 2 —Ä—è–¥–∫–∏ —è–∫—â–æ –¥–æ–≤–≥–æ
      const text = smartLineWrap(chunk.map(word => word.word));

      const startTimecode = formatTimecode(startTime);
      const endTimecode = formatTimecode(endTime);

      srtEntries.push(
        `${i + 1}`,
        `${startTimecode} --> ${endTimecode}`,
        text,
        ''
      );
    }

    // –ó–∞–ø–∏—Å—É—î–º–æ SRT —Ñ–∞–π–ª
    const srtContent = srtEntries.join('\n');
    await fs.writeFile(srtPath, srtContent, 'utf8');

    console.log(`‚úÖ Created synchronized SRT: ${srtPath}`);
    console.log(`üìä Total subtitles: ${chunks.length}`);
    console.log(`‚è±Ô∏è Duration: ${formatTimecode(allWords[allWords.length - 1].end)}`);

    return srtPath;
  } catch (error) {
    console.error(`‚ùå Error: ${error.message}`);
    throw error;
  }
}

// CLI interface
async function main() {
  const args = process.argv.slice(2);

  if (args.length < 2) {
    console.error("Usage: node create_sync_srt.js input.json output.srt [words_per_chunk]");
    console.error("Example: node create_sync_srt.js voice.json subtitles.srt 5");
    process.exit(1);
  }

  const jsonPath = path.resolve(args[0]);
  const srtPath = path.resolve(args[1]);
  const wordsPerChunk = args[2] ? parseInt(args[2]) : 5;

  if (wordsPerChunk < 2 || wordsPerChunk > 10) {
    console.error("Words per chunk should be between 2 and 10");
    process.exit(1);
  }

  try {
    await createSyncSrt(jsonPath, srtPath, wordsPerChunk);
  } catch (error) {
    console.error("Failed to create SRT:", error.message);
    process.exit(1);
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
export { createSyncSrt };

// –ó–∞–ø—É—Å–∫–∞—î–º–æ CLI —è–∫—â–æ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π –Ω–∞–ø—Ä—è–º—É
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}