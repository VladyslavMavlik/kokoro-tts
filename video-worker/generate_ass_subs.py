#!/usr/bin/env python3
"""
Generate ASS subtitles with word-level highlighting (karaoke effect)
Uses faster-whisper for transcription with word timestamps
"""

import sys
import json
import argparse
from pathlib import Path
from faster_whisper import WhisperModel
import pysubs2
from pysubs2 import SSAFile, SSAEvent, SSAStyle


def transcribe_with_word_timestamps(audio_path, model_size="base", device="cpu", compute_type="int8"):
    """
    Transcribe audio with word-level timestamps using faster-whisper
    """
    print(f"üé§ Loading Whisper model: {model_size}")
    model = WhisperModel(model_size, device=device, compute_type=compute_type)

    print(f"üéµ Transcribing: {audio_path}")
    segments, info = model.transcribe(
        audio_path,
        beam_size=5,
        word_timestamps=True,
        language=None  # Auto-detect
    )

    print(f"üìä Detected language: {info.language} (probability: {info.language_probability:.2f})")

    # Collect all segments with word-level data
    result = []
    for segment in segments:
        if not segment.words:
            continue

        segment_data = {
            'start': segment.start,
            'end': segment.end,
            'text': segment.text,
            'words': [
                {
                    'word': word.word.strip(),
                    'start': word.start,
                    'end': word.end,
                    'probability': word.probability
                }
                for word in segment.words
            ]
        }
        result.append(segment_data)
        print(f"  üìù Segment: {segment.text[:50]}... ({len(segment.words)} words)")

    return result


def create_ass_style():
    """
    Create ASS style with yellow highlight for spoken words
    """
    style = SSAStyle()

    # Font settings
    style.fontname = "Jumper"  # –ó–º—ñ–Ω–∏–ª–∏ –Ω–∞ Jumper
    style.fontsize = 22  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
    style.bold = True  # –ñ–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç (—Ç–æ–≤—â—ñ –±—É–∫–≤–∏)

    # Colors - pysubs2.Color(r, g, b, a) but ASS stores as &HAABBGGRR
    # Primary color: light gray/white (for unspoken words)
    # –°—ñ—Ä—É–≤–∞—Ç–æ-–±—ñ–ª–∏–π –¥–ª—è —Å–ª—ñ–≤ —â–æ —â–µ –Ω–µ –æ–∑–≤—É—á–µ–Ω—ñ
    style.primary_color = pysubs2.Color(r=200, g=200, b=200, a=0)  # &H00C8C8C8 (light gray)

    # Secondary color: bright yellow (for spoken words)
    # –Ø—Å–∫—Ä–∞–≤–æ-–∂–æ–≤—Ç–∏–π –¥–ª—è –æ–∑–≤—É—á–µ–Ω–∏—Ö —Å–ª—ñ–≤
    style.secondary_color = pysubs2.Color(r=255, g=255, b=0, a=0)  # &H0000FFFF (yellow)

    # Outline color: black
    style.outline_color = pysubs2.Color(r=0, g=0, b=0, a=0)  # &H00000000

    # Shadow color: black with transparency
    style.back_color = pysubs2.Color(r=0, g=0, b=0, a=100)  # &H64000000

    # Border and shadow
    style.outline = 2  # –ß–æ—Ä–Ω–∞ –æ–±–≤–æ–¥–∫–∞
    style.shadow = 1

    # Alignment: bottom center (2)
    style.alignment = 2

    # Margins
    style.marginl = 20
    style.marginr = 20
    style.marginv = 45  # –í—ñ–¥—Å—Ç—É–ø –∑–Ω–∏–∑—É

    return style


def generate_ass_subtitles(segments, output_path, words_per_subtitle=5):
    """
    Generate ASS file with karaoke effect (word highlighting)
    """
    print(f"\n‚ú® Generating ASS subtitles with karaoke effect...")

    # Create SSA file
    subs = SSAFile()

    # Add custom style
    subs.styles["Default"] = create_ass_style()

    # Group words into subtitle chunks with smart splitting at punctuation
    all_words = []
    for segment in segments:
        all_words.extend(segment['words'])

    if not all_words:
        print("‚ö†Ô∏è No words found in segments!")
        return

    print(f"üìä Total words: {len(all_words)}")
    print(f"üî¢ Grouping by {words_per_subtitle} words per subtitle (with smart punctuation splits)")

    # Smart chunking: —Ä–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –∫—Ä–∞–ø–∫–∞—Ö, –∫–æ–º–∞—Ö, –ø–∏—Ç–∞–ª—å–Ω–∏–∫–∞—Ö
    chunks = []
    current_chunk = []

    for word_obj in all_words:
        current_chunk.append(word_obj)
        word_text = word_obj['word']

        # –Ø–∫—â–æ —Å–ª–æ–≤–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞ . ! ? - –ø–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π —Å—É–±—Ç–∏—Ç—Ä
        if word_text.rstrip().endswith(('.', '!', '?')):
            chunks.append(current_chunk)
            current_chunk = []
        # –ê–±–æ —è–∫—â–æ –¥–æ—Å—è–≥–ª–∏ –¢–û–ß–ù–û–á –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏ (–±–µ–∑ –≥–Ω—É—á–∫–æ—Å—Ç—ñ!)
        elif len(current_chunk) >= words_per_subtitle:
            chunks.append(current_chunk)
            current_chunk = []

    # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π chunk —è–∫—â–æ —î
    if current_chunk:
        chunks.append(current_chunk)

    print(f"üìä Created {len(chunks)} subtitle chunks (split at punctuation)")

    # Create subtitle events with karaoke tags
    for chunk in chunks:
        if not chunk:
            continue

        start_time = chunk[0]['start'] * 1000  # Convert to milliseconds
        end_time = chunk[-1]['end'] * 1000

        # Build ASS text with ABSOLUTE timing for each word
        # –í–ê–ñ–õ–ò–í–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —á–∞—Å –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É —Å—É–±—Ç–∏—Ç—Ä–∞!
        ass_text = ""

        subtitle_start_ms = start_time  # –ü–æ—á–∞—Ç–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–∞ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö

        for i, word in enumerate(chunk):
            # –ê–±—Å–æ–ª—é—Ç–Ω–∏–π —á–∞—Å –ø–æ—á–∞—Ç–∫—É —Å–ª–æ–≤–∞ (–≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–µ–æ)
            word_start_abs_ms = word['start'] * 1000

            # –í—ñ–¥–Ω–æ—Å–Ω–∏–π —á–∞—Å –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –¶–¨–û–ì–û —Å—É–±—Ç–∏—Ç—Ä–∞ (–≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö)
            word_start_relative_ms = word_start_abs_ms - subtitle_start_ms

            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏ –¥–ª—è \t() —Ç–µ–≥–∞
            # ASS \t() –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏!
            transition_time = int(word_start_relative_ms)

            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å–ª–æ–≤–æ –≤ –ö–ê–ü–°
            word_upper = word['word'].upper()

            if i == 0 and transition_time <= 0:
                # –ü–µ—Ä—à–µ —Å–ª–æ–≤–æ - —è–∫—â–æ –≤–æ–Ω–æ –Ω–∞ —Å–∞–º–æ–º—É –ø–æ—á–∞—Ç–∫—É —Å—É–±—Ç–∏—Ç—Ä–∞, –æ–¥—Ä–∞–∑—É –∂–æ–≤—Ç–µ
                ass_text += f"{{\\c&H00FFFF&}}{word_upper} "
            else:
                # –í—Å—ñ —ñ–Ω—à—ñ —Å–ª–æ–≤–∞: —Å–ø–æ—á–∞—Ç–∫—É —Å—ñ—Ä—ñ, –ø–æ—Ç—ñ–º —Å—Ç–∞—é—Ç—å –∂–æ–≤—Ç–∏–º–∏ –≤ —Ç–æ—á–Ω–∏–π –º–æ–º–µ–Ω—Ç
                # \t(start,end,tags) –¥–µ start=end –¥–ª—è –º–∏—Ç—Ç—î–≤–æ—ó –∑–º—ñ–Ω–∏
                ass_text += f"{{\\c&HC8C8C8&\\t({transition_time},{transition_time},\\c&H00FFFF&)}}{word_upper} "

        ass_text = ass_text.strip()

        # Create SSA event
        event = SSAEvent(
            start=int(start_time),
            end=int(end_time),
            text=ass_text
        )
        subs.events.append(event)

    # Save to file
    subs.save(output_path)

    # –í–ê–ñ–õ–ò–í–û: pysubs2 –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î Primary color –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Ä—É—á–Ω—É –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    with open(output_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # –ó–º—ñ–Ω—é—î–º–æ Primary color –∑ –±—ñ–ª–æ–≥–æ –Ω–∞ —Å—ñ—Ä–∏–π
    # –Ü –∑–º—ñ–Ω—é—î–º–æ WrapStyle –Ω–∞ 2 (smart wrapping, –∞–ª–µ –º–∏ –≤—Å–µ –æ–¥–Ω–æ –Ω–µ –±—É–¥–µ–º–æ –º–∞—Ç–∏ –¥–æ–≤–≥—ñ —Ä—è–¥–∫–∏)
    content = content.replace('WrapStyle: 0', 'WrapStyle: 2')

    # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç–∏–ª—å –≤—Ä—É—á–Ω—É (–ø—Ä–æ—Å—Ç—ñ—à–µ —ñ –Ω–∞–¥—ñ–π–Ω—ñ—à–µ)
    import re
    # –°–ø–æ—á–∞—Ç–∫—É –º—ñ–Ω—è—î–º–æ FontName, FontSize, PrimaryColour
    content = re.sub(
        r'Style: Default,\w+,\d+,&H00FFFFFF,',
        'Style: Default,Jumper,22,&H00C8C8C8,',
        content
    )
    # –ü–æ—Ç—ñ–º –º—ñ–Ω—è—î–º–æ Bold –∑ 0 –Ω–∞ -1
    content = re.sub(
        r'(Style: Default,[^,]+,[^,]+,[^,]+,[^,]+,[^,]+,[^,]+,)0,',
        r'\1-1,',
        content
    )
    # Outline –≤–∂–µ 2 - –Ω–µ –º—ñ–Ω—è—î–º–æ
    # –ú—ñ–Ω—è—î–º–æ MarginV –∑ 20 –Ω–∞ 45
    content = re.sub(
        r',2,20,20,20,1$',
        ',2,20,20,45,1',
        content,
        flags=re.MULTILINE
    )

    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(content)

    print(f"‚úÖ ASS subtitles saved: {output_path}")
    print(f"üìä Total subtitle events: {len(subs.events)}")
    print(f"üé® Colors: Gray (&H00C8C8C8) ‚Üí Yellow (&H00FFFF)")


def main():
    parser = argparse.ArgumentParser(
        description="Generate ASS subtitles with word-level highlighting (karaoke effect)"
    )
    parser.add_argument("audio_path", help="Path to audio file")
    parser.add_argument("output_path", help="Path to output ASS file")
    parser.add_argument(
        "--model",
        default="base",
        choices=["tiny", "base", "small", "medium", "large"],
        help="Whisper model size (default: base)"
    )
    parser.add_argument(
        "--device",
        default="cpu",
        choices=["cpu", "cuda"],
        help="Device to run on (default: cpu)"
    )
    parser.add_argument(
        "--compute-type",
        default="int8",
        choices=["int8", "int16", "float16", "float32"],
        help="Compute type for model (default: int8)"
    )
    parser.add_argument(
        "--words-per-subtitle",
        type=int,
        default=5,
        help="Number of words per subtitle (default: 5)"
    )
    parser.add_argument(
        "--save-json",
        action="store_true",
        help="Save raw transcription to JSON file"
    )

    args = parser.parse_args()

    # Validate inputs
    audio_path = Path(args.audio_path)
    if not audio_path.exists():
        print(f"‚ùå Error: Audio file not found: {audio_path}")
        sys.exit(1)

    output_path = Path(args.output_path)
    output_path.parent.mkdir(parents=True, exist_ok=True)

    try:
        # Step 1: Transcribe with word timestamps
        segments = transcribe_with_word_timestamps(
            str(audio_path),
            model_size=args.model,
            device=args.device,
            compute_type=args.compute_type
        )

        if not segments:
            print("‚ùå No segments transcribed!")
            sys.exit(1)

        # Save JSON if requested
        if args.save_json:
            json_path = output_path.with_suffix('.json')
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(segments, f, indent=2, ensure_ascii=False)
            print(f"üíæ Saved transcription JSON: {json_path}")

        # Step 2: Generate ASS subtitles with karaoke effect
        generate_ass_subtitles(segments, str(output_path), args.words_per_subtitle)

        print("\n‚úÖ Done!")

    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
